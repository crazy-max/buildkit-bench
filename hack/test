#!/usr/bin/env bash

set -eu -o pipefail

: "${TEST_IMAGE_BUILD=1}"
: "${TEST_IMAGE_ID=buildkit-bench}"
: "${TEST_KEEP_CACHE=}"
: "${TEST_FLAGS=}"

: "${BUILDKIT_REF_RANDOM=}"
: "${BUILDKIT_RUN_COUNT=1}"

gotestArgs="-json -mod=vendor"

if [ "$TEST_IMAGE_BUILD" = "1" ]; then
  docker buildx bake tests --set "*.output=type=docker,name=$TEST_IMAGE_ID"
fi

testOutputDir="$(pwd)/bin"
mkdir -p "$testOutputDir"

cacheVolume="buildkit-bench-cache"
if ! docker container inspect "$cacheVolume" >/dev/null 2>/dev/null; then
  docker create -v /root/.cache -v /root/.cache/registry -v /go/pkg/mod --name "$cacheVolume" alpine
fi
if [ "$TEST_KEEP_CACHE" != "1" ]; then
  trap 'docker rm -v $cacheVolume' EXIT
fi

set -x

docker run --rm --privileged \
  -v /tmp \
  -v $testOutputDir:/testout \
  --volumes-from=$cacheVolume \
  -e BUILDKIT_REF_RANDOM \
  -e BUILDKIT_RUN_COUNT \
  -e REGISTRY_MIRROR_DIR=/root/.cache/registry \
  $TEST_IMAGE_ID \
  sh -c "go test -bench . -benchmem $gotestArgs ${TEST_FLAGS:--v} ./... | gotestmetrics parse --output /testout/gotestoutput.json"
